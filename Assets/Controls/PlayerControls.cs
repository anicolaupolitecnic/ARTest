//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""HumanControls"",
            ""id"": ""d4c05530-c635-4693-b44e-b23c5162b23d"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9f07850e-2ab9-4e77-b7ce-dd48da85fb1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""82745b20-d897-446c-a88d-e1671ee5dd68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7636855b-364b-40f4-a2b0-b0b9101beda9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Lantern"",
                    ""type"": ""Value"",
                    ""id"": ""92316579-4e97-4f26-a30e-a7cce7fdabb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30044952-b7ec-41c2-bbcd-c0ca097e61ff"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TeclatRata"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b0f5380-1b62-46a1-a97f-64cd8153999a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mando"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a251d18b-66ed-4c13-bd04-4d2a32dfa93e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mando"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09f954e4-c9fa-4af5-9913-24d7a78a18a5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TeclatRata"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4467058c-54fd-4989-b7b1-95d27f963e6f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mando"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""dbe77ca4-43d1-4d80-ae56-2c2e8e1e1a87"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f608242e-714e-47c1-bf70-2d5521c41ef1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TeclatRata"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3688724d-5b28-43e7-93d1-c6d72712812e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TeclatRata"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""50fb848a-744c-449a-9a15-5542e86a5630"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TeclatRata"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9b45a885-026e-4c01-bbd8-bf6eb0bbc456"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TeclatRata"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""21358829-ef43-4a91-95cc-39b28d3dee78"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TeclatRata"",
                    ""action"": ""Lantern"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c216c65-42b0-47c0-8a53-2c24a8207734"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mando"",
                    ""action"": ""Lantern"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mando"",
            ""bindingGroup"": ""Mando"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""TeclatRata"",
            ""bindingGroup"": ""TeclatRata"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // HumanControls
        m_HumanControls = asset.FindActionMap("HumanControls", throwIfNotFound: true);
        m_HumanControls_Jump = m_HumanControls.FindAction("Jump", throwIfNotFound: true);
        m_HumanControls_Shoot = m_HumanControls.FindAction("Shoot", throwIfNotFound: true);
        m_HumanControls_Move = m_HumanControls.FindAction("Move", throwIfNotFound: true);
        m_HumanControls_Lantern = m_HumanControls.FindAction("Lantern", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HumanControls
    private readonly InputActionMap m_HumanControls;
    private List<IHumanControlsActions> m_HumanControlsActionsCallbackInterfaces = new List<IHumanControlsActions>();
    private readonly InputAction m_HumanControls_Jump;
    private readonly InputAction m_HumanControls_Shoot;
    private readonly InputAction m_HumanControls_Move;
    private readonly InputAction m_HumanControls_Lantern;
    public struct HumanControlsActions
    {
        private @PlayerControls m_Wrapper;
        public HumanControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_HumanControls_Jump;
        public InputAction @Shoot => m_Wrapper.m_HumanControls_Shoot;
        public InputAction @Move => m_Wrapper.m_HumanControls_Move;
        public InputAction @Lantern => m_Wrapper.m_HumanControls_Lantern;
        public InputActionMap Get() { return m_Wrapper.m_HumanControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HumanControlsActions set) { return set.Get(); }
        public void AddCallbacks(IHumanControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_HumanControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HumanControlsActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Lantern.started += instance.OnLantern;
            @Lantern.performed += instance.OnLantern;
            @Lantern.canceled += instance.OnLantern;
        }

        private void UnregisterCallbacks(IHumanControlsActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Lantern.started -= instance.OnLantern;
            @Lantern.performed -= instance.OnLantern;
            @Lantern.canceled -= instance.OnLantern;
        }

        public void RemoveCallbacks(IHumanControlsActions instance)
        {
            if (m_Wrapper.m_HumanControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHumanControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_HumanControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HumanControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HumanControlsActions @HumanControls => new HumanControlsActions(this);
    private int m_MandoSchemeIndex = -1;
    public InputControlScheme MandoScheme
    {
        get
        {
            if (m_MandoSchemeIndex == -1) m_MandoSchemeIndex = asset.FindControlSchemeIndex("Mando");
            return asset.controlSchemes[m_MandoSchemeIndex];
        }
    }
    private int m_TeclatRataSchemeIndex = -1;
    public InputControlScheme TeclatRataScheme
    {
        get
        {
            if (m_TeclatRataSchemeIndex == -1) m_TeclatRataSchemeIndex = asset.FindControlSchemeIndex("TeclatRata");
            return asset.controlSchemes[m_TeclatRataSchemeIndex];
        }
    }
    public interface IHumanControlsActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnLantern(InputAction.CallbackContext context);
    }
}
